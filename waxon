#!/usr/bin/env bash
# WaxOn — Pre‑Edit Audio Preprocessor (Limiter‑only)
# VERSION: v1.4
set -Eeuo pipefail
shopt -s nullglob

# Defaults
SAMPLE_RATE="${SAMPLE_RATE:-44100}"
LIMIT_DB="${LIMIT_DB:- -1.0}"
CHANNEL="${CHANNEL:-L}"          # L|R
DC_HZ="${DC_HZ:-20}"
CLIP_REPAIR="${CLIP_REPAIR:-off}"  # on|off
PROMPT="${WAXON_PROMPT:-1}"       # 1=interactive, 0=no

print_help() {
  cat <<EOF
WaxOn v1.4 — limiter‑only, mono pre‑edit render (no loudness normalization)

Usage: waxon [options] <files...>

Options:
  -s, --samplerate <Hz>   44100 | 48000 (default: ${SAMPLE_RATE})
  -l, --limit-db <dB>     limiter ceiling, e.g., -1.0 .. -6.0 (default: ${LIMIT_DB})
  -c, --channel <L|R>     choose source channel for mono render (default: ${CHANNEL})
      --dc-block-hz <Hz>  high‑pass corner for DC block (default: ${DC_HZ})
      --clip-repair <on|off>  enable/disable clip repair (default: ${CLIP_REPAIR})
      --no-prompt         skip interactive prompts
  -n, --dry-run           show actions without writing
  -q, --quiet             less console output
  -h, --help              show this help
      --version           show version

Env vars: SAMPLE_RATE, LIMIT_DB, CHANNEL, DC_HZ, CLIP_REPAIR, WAXON_PROMPT
EOF
}

echo_version() { echo "WaxOn v1.4"; }

DRYRUN=0; QUIET=0
args=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help) print_help; exit 0;;
    --version) echo_version; exit 0;;
    -s|--samplerate) SAMPLE_RATE="$2"; shift 2;;
    -l|--limit-db)   LIMIT_DB="$2"; shift 2;;
    -c|--channel)    CHANNEL="$2"; shift 2;;
    --dc-block-hz)   DC_HZ="$2"; shift 2;;
    --clip-repair)   CLIP_REPAIR="$2"; shift 2;;
    --no-prompt)     PROMPT=0; shift;;
    -n|--dry-run)    DRYRUN=1; shift;;
    -q|--quiet)      QUIET=1; shift;;
    --) shift; break;;
    -*)
      echo "Unknown option: $1" >&2; exit 2;;
    *)
      args+=("$1"); shift;;
  esac
done
# Append remaining as args
args+=("$@")

if [[ ${#args[@]} -eq 0 ]]; then
  print_help; exit 1
fi

command -v ffmpeg >/dev/null 2>&1 || { echo "Error: ffmpeg not found."; exit 1; }

# Interactive prompts
if [[ "${PROMPT}" == "1" ]]; then
  read -r -p "Sample rate [44100|48000] (${SAMPLE_RATE}): " inp || true
  [[ -n "${inp:-}" ]] && SAMPLE_RATE="${inp}"
  read -r -p "Limiter ceiling dB [-1.0..-6.0] (${LIMIT_DB}): " inp || true
  [[ -n "${inp:-}" ]] && LIMIT_DB="${inp}"
  read -r -p "Channel [L|R] (${CHANNEL}): " inp || true
  [[ -n "${inp:-}" ]] && CHANNEL="${inp}"
  read -r -p "Clip repair [on|off] (${CLIP_REPAIR}): " inp || true
  [[ -n "${inp:-}" ]] && CLIP_REPAIR="${inp}"
  echo "Proceeding with: SR=${SAMPLE_RATE}, LIMIT=${LIMIT_DB} dBFS, CH=${CHANNEL}, CLIP_REPAIR=${CLIP_REPAIR}"
fi

# Validate
[[ "${CHANNEL}" =~ ^[LR]$ ]] || { echo "Channel must be L or R"; exit 1; }
[[ "${SAMPLE_RATE}" == "44100" || "${SAMPLE_RATE}" == "48000" ]] || { echo "Samplerate must be 44100 or 48000"; exit 1; }

# Channel map (pan)
PAN_EXPR="mono|c0=c0"  # L
if [[ "${CHANNEL}" == "R" ]]; then PAN_EXPR="mono|c0=c1"; fi

# Clip repair filter
CLIPF=""
if [[ "${CLIP_REPAIR}" == "on" ]]; then
  CLIPF="adeclip,"
fi

# Dither / resample
ARES="aresample=${SAMPLE_RATE}:resampler=soxr:dither_method=triangular_hp"

# Limiter: sample‑peak brickwall via alimiter
# NOTE: alimiter's limit is specified in dB. Example: -1.0 sets ceiling to -1 dBFS.
ALIM="alimiter=limit=${LIMIT_DB}:attack=5:release=50"

# DC block (gentle high‑pass)
HPF="highpass=f=${DC_HZ}"

# Build filter chain
AFILTER="pan=${PAN_EXPR},${CLIPF}${HPF},${ALIM},${ARES}"

processed=0
failed=0

for inpath in "${args[@]}"; do
  [[ -f "$inpath" ]] || { echo "Skip (not a file): $inpath"; continue; }
  stem="${inpath%.*}"
  out="${stem}-waxon.wav"
  tmp="${out}.part"

  if [[ "${DRYRUN}" -eq 1 ]]; then
    echo "[DRY] ffmpeg -y -i '$inpath' -vn -ac 1 -sample_fmt s24 -c:a pcm_s24le -af \"$AFILTER\" '$tmp' && mv -f '$tmp' '$out'"
    continue
  fi

  # Ensure hidden temp then reveal
  tmpdir="$(dirname "$out")"
  tmptgt="${tmpdir}/.$(basename "$tmp")"

  set +e
  ffmpeg -hide_banner -loglevel error -y \
    -i "$inpath" \
    -vn -ac 1 -sample_fmt s24 -c:a pcm_s24le \
    -af "$AFILTER" \
    "$tmptgt"
  rc=$?
  set -e

  if [[ $rc -eq 0 ]]; then
    mv -f "$tmptgt" "$out"
    ((processed++))
    [[ $QUIET -eq 1 ]] || echo "OK  -> $out"
  else
    rm -f "$tmptgt"
    ((failed++))
    echo "FAIL -> $inpath"
  fi
done

echo "Files processed: $processed; failed: $failed"
exit 0
